function contactsMap(){
    var $page = $("#contactsMap");
    if( $page.length == 0 ){return false}
    var myContactsMap;
    ymaps.ready(init);
    function init(){
        myContactsMap = new ymaps.Map('contactsMap', {
            center: [55.708652, 37.653438],
            zoom: 16,
            controls: []
        });
        /* Custom zoom control buttons*/
        myContactsMap.behaviors.disable('scrollZoom');
        // Создадим пользовательский макет ползунка масштаба.
        var ZoomLayout = ymaps.templateLayoutFactory.createClass("<div>\
                <div id='yaPanorama' class='btn'><i class='icon-panorama'></i></div>\
                <div id='zoom-in' class='btn'><i class='icon-plus'></i>\
                </div><div id='zoom-out' class='btn'><i class='icon-minus'></i></div>\
            </div>", {

            // Переопределяем методы макета, чтобы выполнять дополнительные действия
            // при построении и очистке макета.
            build: function () {
                // Вызываем родительский метод build.
                ZoomLayout.superclass.build.call(this);

                // Привязываем функции-обработчики к контексту и сохраняем ссылки
                // на них, чтобы потом отписаться от событий.
                this.zoomInCallback = ymaps.util.bind(this.zoomIn, this);
                this.zoomOutCallback = ymaps.util.bind(this.zoomOut, this);

                // Начинаем слушать клики на кнопках макета.
                $('#zoom-in').bind('click', this.zoomInCallback);
                $('#zoom-out').bind('click', this.zoomOutCallback);
                $('#yaPanorama').on('click', function(){
                    $(".contactsMapPanorama-wrapper").css({"z-index": 1});
                    $("#contactsMap").css({"z-index": 0});
                });
            },

            clear: function () {
                // Снимаем обработчики кликов.
                $('#zoom-in').unbind('click', this.zoomInCallback);
                $('#zoom-out').unbind('click', this.zoomOutCallback);

                // Вызываем родительский метод clear.
                ZoomLayout.superclass.clear.call(this);
            },

            zoomIn: function () {
                var map = this.getData().control.getMap();
                // Генерируем событие, в ответ на которое
                // элемент управления изменит коэффициент масштабирования карты.
                this.events.fire('zoomchange', {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() + 1
                });
                if(  map.getZoom() < 15  ){

                }
            },

            zoomOut: function () {
                var map = this.getData().control.getMap();
                this.events.fire('zoomchange', {
                    oldZoom: map.getZoom(),
                    newZoom: map.getZoom() - 1
                });
            }
        }),
        zoomControl = new ymaps.control.ZoomControl({ options: { layout: ZoomLayout } });
        /*END CUSTOM ZOOM CONTROL BUTTONS*/

        /*лайаут балуна*/
        var MyBalloonLayout = ymaps.templateLayoutFactory.createClass(
                '<div class="parkingBallon">\
                    <div class="baloonContent">$[[options.contentLayout]]</div>\
                    <div class="closeBut"></div>\
                    <div class="bottomHelper"><div class="arrow"></div><div class="circle"></div></div>\
                </div>', {
                /**
                 * Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент.
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/layout.templateBased.Base.xml#build
                 * @function
                 * @name build
                 */
                build: function () {
                    this.constructor.superclass.build.call(this);

                    this._$element = $('.parkingBallon', this.getParentElement());

                    this.applyElementOffset();

                    this._$element.find('.closeBut')
                        .on('click', $.proxy(this.onCloseClick, this));
                },

                /**
                 * Удаляет содержимое макета из DOM.
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/layout.templateBased.Base.xml#clear
                 * @function
                 * @name clear
                 */
                clear: function () {
                    this._$element.find('.closeBut')
                        .off('click');

                    this.constructor.superclass.clear.call(this);
                },

                /**
                 * Метод будет вызван системой шаблонов АПИ при изменении размеров вложенного макета.
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/IBalloonLayout.xml#event-userclose
                 * @function
                 * @name onSublayoutSizeChange
                 */
                onSublayoutSizeChange: function () {
                    MyBalloonLayout.superclass.onSublayoutSizeChange.apply(this, arguments);

                    if(!this._isElement(this._$element)) {
                        return;
                    }

                    this.applyElementOffset();

                    this.events.fire('shapechange');
                },

                /**
                 * Сдвигаем балун, чтобы "хвостик" указывал на точку привязки.
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/IBalloonLayout.xml#event-userclose
                 * @function
                 * @name applyElementOffset
                 */
                applyElementOffset: function () {
                    this._$element.css({
                        left: -(this._$element[0].offsetWidth / 2),
                        top: -(this._$element[0].offsetHeight + this._$element.find('.bottomHelper')[0].offsetHeight)
                    });
                },

                /**
                 * Закрывает балун при клике на крестик, кидая событие "userclose" на макете.
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/IBalloonLayout.xml#event-userclose
                 * @function
                 * @name onCloseClick
                 */
                onCloseClick: function (e) {
                    e.preventDefault();

                    this.events.fire('userclose');
                },

                /**
                 * Используется для автопозиционирования (balloonAutoPan).
                 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/ILayout.xml#getClientBounds
                 * @function
                 * @name getClientBounds
                 * @returns {Number[][]} Координаты левого верхнего и правого нижнего углов шаблона относительно точки привязки.
                 */
                getShape: function () {
                    if(!this._isElement(this._$element)) {
                        return MyBalloonLayout.superclass.getShape.call(this);
                    }

                    var position = this._$element.position();

                    return new ymaps.shape.Rectangle(new ymaps.geometry.pixel.Rectangle([
                        [position.left, position.top], [
                            position.left + this._$element[0].offsetWidth,
                            position.top + this._$element[0].offsetHeight + this._$element.find('.bottomHelper')[0].offsetHeight
                        ]
                    ]));
                },

                /**
                 * Проверяем наличие элемента (в ИЕ и Опере его еще может не быть).
                 * @function
                 * @private
                 * @name _isElement
                 * @param {jQuery} [element] Элемент.
                 * @returns {Boolean} Флаг наличия.
                 */
                _isElement: function (element) {
                    return element && element[0] && element.find('.bottomHelper')[0];
                }
            }),

    // Создание вложенного макета содержимого балуна.
        MyBalloonContentLayout = ymaps.templateLayoutFactory.createClass(
                        '<div class="name">$[properties.balloonName]</div>\
                        <div class="time">$[properties.balloonTime]</div>\
                        <div class="options">$[properties.balloonOptions]</div>'
        );

        /*КОНЕЦ ЛАЙАУТ БАЛУНА*/
        /*парковки*/



        // myParkingPinCollection = new ymaps.GeoObjectCollection();
        // var parkingPins = {
        //     "1": {
        //         "coordinates" : [55.768151, 37.588764],
        //         "name"        : "Парковка №3203 (120)",
        //         "time"        : "Круглосуточная",
        //         "options"     : "•  60 руб./час<br />•  10 мест (2 для инвалидов)"
        //     },
        //     "2": {
        //         "coordinates" : [55.768707, 37.589923],
        //         "name"        : "Парковка №3203 (120)",
        //         "time"        : "Круглосуточная",
        //         "options"     : "•  60 руб./час<br />•  10 мест (2 для инвалидов)"
        //     }
        // };

        // for(var el in parkingPins) {
        //     var myPlacemark = new ymaps.Placemark([ parkingPins[el]['coordinates'][0] , parkingPins[el]['coordinates'][1] ], { // Создаем метку с такими координатами и суем в переменную
        //             balloonName: parkingPins[el]['name'],
        //             balloonTime: parkingPins[el]['time'],
        //             balloonOptions: parkingPins[el]['options']
        //         }, {
        //         iconLayout: 'default#image',
        //         iconImageHref: '/cwrussia-theme/images/yaMap-parking.png?v2', // картинка иконки
        //         iconImageSize: [26, 32], // размер иконки
        //         iconImageOffset: [-13, -32], // позиция иконки

        //         balloonShadow: false,
        //         balloonLayout: MyBalloonLayout,
        //         balloonContentLayout: MyBalloonContentLayout,
        //         balloonPanelMaxMapArea: 0
        //         // Не скрываем иконку при открытом балуне.
        //         // hideIconOnBalloonOpen: false,
        //         // И дополнительно смещаем балун, для открытия над иконкой.
        //         // balloonOffset: [3, -40]
        //     });
        //     /* Добавляем */
        //     myParkingPinCollection.add(myPlacemark);
        // }
        /*PANORAMS*/
        if (ymaps.panorama.isSupported()) {
            // Ищем панораму в переданной точке.
            ymaps.panorama.locate([55.709287, 37.653816]).done(
                function (panoramas) {
                    // Убеждаемся, что найдена хотя бы одна панорама.
                    if (panoramas.length > 0) {
                        // Создаем плеер с одной из полученных панорам.
                        var player = new ymaps.panorama.Player(
                                'contactsMapPanorama',
                                // Панорамы в ответе отсортированы по расстоянию
                                // от переданной в panorama.locate точки. Выбираем первую,
                                // она будет ближайшей.
                                panoramas[0],
                                // Зададим направление взгляда, отличное от значения
                                // по умолчанию.
                                { 
                                    direction: [180, 15],
                                    //zoom: 1,
                                    suppressMapOpenBlock: true,
                                    controls: ['zoomControl']
                                }
                            );


                    }
                },
                function (error) {
                    // Если что-то пошло не так, сообщим об этом пользователю.
                    alert(error.message);
                }
            );
        }
        /*END PANORAMS*/
        $("body").on("click", ".ballon .closeBut", function(){
            myContactsMap.balloon.close();
        });
        
        /* Фикс кривого выравнивания кастомных балунов */
        myContactsMap.geoObjects.events.add([
            'balloonopen'
        ], function (e) {
            var geoObject = e.get('target');
            myContactsMap.panTo(geoObject.geometry.getCoordinates(), {
                delay: 0
            });
            //$(".ballon").css({ "margin-top" : -$(".ballon").outerHeight()/2 });
        });
        $(window).on('resize', function() {
            setTimeout(function(){
                myContactsMap.container.fitToViewport();
            }, 500);
            
        });

        /*основной пин*/
        var main = new ymaps.Placemark(myContactsMap.getCenter(), {
            balloonContent: '<div class="ballon">\
             <div class="title">Наши контакты</div>\
             <div class="t1">Телефон: +7 (495) 120-32-30</div>\
             <div class="t2">Почта: <a href="mailto:newbusines@corpguru.ru">newbusines@corpguru.ru</a></div>\
             <div class="t3">Арес: 115280, Россия, Москва,<br/>ул. Ленинская Слобода, д.19,<br/>БЦ «Омега Плаза»</div>\
             <div class="closeBallon"></div>\
         </div>'
        }, {
            iconLayout: 'default#image',
            iconImageHref: '../images/mapPin.png', // картинка иконки
            iconImageSize: [51, 71], // размер иконки
            iconImageOffset: [-25, -71], // позиция иконки
            balloonContentSize: [388, 100], // размер нашего кастомного балуна в пикселях
            balloonLayout: "default#imageWithContent", // указываем что содержимое балуна кастомная херь
            //balloonImageHref: '/bitrix/templates/interrosacamp/img/map/mapPin.png', // Картинка заднего фона балуна
            balloonImageOffset: [99, -5], // смещание балуна, надо подогнать под стрелочку
            //balloonImageSize: [260, 89], // размер картинки-бэкграунда балуна
            balloonShadow: false,
            hideIconOnBalloonOpen: false,
            balloonAutoPan: false // для фикса кривого выравнивания
        });


        /*Линия*/
        // Создаем ломаную линию.
        var polyline = new ymaps.Polyline([
            [55.769411, 37.596591], [55.768976, 37.595819], [55.769623, 37.594714], [55.769164, 37.593737], [55.770040, 37.592246], [55.768716, 37.589832]
        ], {
            hintContent: "Путь от метро"
        }, {
            draggable: false,
            strokeColor: '#e4002b',
            strokeWidth: 4,
            opacity: 0.6,
            // Первой цифрой задаем длину штриха. Второй цифрой задаем длину разрыва.
            strokeStyle: '1 0'
        });

        // Устанавливаем карте границы линии.
        //myContactsMap.setBounds(polyline.geometry.getBounds());

        // добавляем обьекты на карту
        myContactsMap.geoObjects
            //.add(myParkingPinCollection)
            //.add(polyline)
            .add(main);

        /* add custom zoom buttons*/
        myContactsMap.controls.add(zoomControl, {
            float: 'none',
            position: {
                right: 16,
                bottom: 44
            }
        });
        /**/

        $("body").on("click", ".ballon .closeBallon", function(){
            main.balloon.close();
        });
        myContactsMap.events.add('boundschange', function (e) {
            main.options.set('visible', true);
        });


        myContactsMap.geoObjects.events.add([
            'balloonopen'
        ], function (e) {
            var geoObject = e.get('target');
            myContactsMap.panTo(geoObject.geometry.getCoordinates(), {
                delay: 0
            });
            $(".ballon").css({ "margin-top" : -$(".ballon").outerHeight()/2 });
            $(".ballon").addClass("complete");
        });
        $(window).on('resize', function() {
            setTimeout(function(){
                myContactsMap.container.fitToViewport();
            }, 500);
            
        });
        main.balloon.open();

        var timerId = setInterval(function() {
            if( $(".ballon").length > 0 ){
                $(".ballon").css({ "margin-top" : -$(".ballon").outerHeight()/2 });
                $(".ballon").addClass("complete");
                clearInterval(timerId);
            }
        }, 250);

        $(window).on("debouncedresize", function(){
            myContactsMap.container.fitToViewport();
        });
        if (!ymaps.panorama.isSupported()) {
            $("body").addClass("yaMapPanoramaNotSup");
        }
    }/*END INIT*/





    $('.contactsMapPanorama-back').on('click', function(){
        $("#contactsMapPanorama").css({"z-index": 0});
        $("#contactsMap").css({"z-index": 1});
    });
};;(function () {
	SmoothScroll({ 
	    // Scrolling Core
	    animationTime    : 500, // [ms]
	    stepSize         : 80, // [px]

	    // Acceleration
	    accelerationDelta : 50,  // 50
	    accelerationMax   : 3,   // 3

	    // Keyboard Settings
	    keyboardSupport   : true,  // option
	    arrowScroll       : 50,    // [px]

	    // Pulse (less tweakable)
	    // ratio of "tail" to "acceleration"
	    pulseAlgorithm   : true,
	    pulseScale       : 4,
	    pulseNormalize   : 1,

	    // Other
	    touchpadSupport   : false, // ignore touchpad by default
	    fixedBackground   : true, 
	    excluded          : ''    
		}
	);

  var is_safari = navigator.userAgent.indexOf("Safari") > -1;
  if ( navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1){
      Inputmask.extendDefaults({
        'showMaskOnHover':false
      });
  }

  function isJSON(str) {
    try {
      JSON.parse(str);
    } catch (e) {
      return false;
    }
    return true;
  }

	/*ОТКЛЮЧЕНИЕ ВКЛЮЧЕНИЕ СКРОЛА*/
	var keys = {37: 1, 38: 1, 39: 1, 40: 1};

	function preventDefault(e) {
	  e = e || window.event;
	  if (e.preventDefault)
	      e.preventDefault();
	  e.returnValue = false;  
	};
	function preventDefaultForScrollKeys(e) {
	    if (keys[e.keyCode]) {
	        preventDefault(e);
	        return false;
	    }
	};
	function disableScroll() {
	  if (window.addEventListener) // older FF
	      window.addEventListener('DOMMouseScroll', preventDefault, false);
	  window.onwheel = preventDefault; // modern standard
	  window.onmousewheel = document.onmousewheel = preventDefault; // older browsers, IE
	  window.ontouchmove  = preventDefault; // mobile
	  document.onkeydown  = preventDefaultForScrollKeys;
	};
	function enableScroll() {
	    if (window.removeEventListener)
	        window.removeEventListener('DOMMouseScroll', preventDefault, false);
	    window.onmousewheel = document.onmousewheel = null; 
	    window.onwheel = null; 
	    window.ontouchmove = null;  
	    document.onkeydown = null;  
	};

	/*ОТКЛЮЧЕНИЕ ВКЛЮЧЕНИЕ СКРОЛА END*/

	scroll(0,0);
	var controller = new ScrollMagic.Controller();

	function getRandom(min, max) {
	  return min + Math.random() * (max - min);
	}

	function animateB1(){

		function prepareArrow( thisSvgId ){
      var s = Snap('#'+thisSvgId);
      var path = s.select('path');
  		var len = path.getTotalLength();
			path.attr({
	        "stroke-dasharray": len + " " + len,
	        "stroke-dashoffset": len
	    })
		}
		function prepareText(){
	    $("#b1 .text .iw .text").each(function (i) {
	        $(this).html( $(this).text().replace(/./g, "<span>$&</span>").replace(/\s/g, "&nbsp;"));
	    });
		}
		prepareText();
		$("#b1 svg[id*='arrow']").each(function(){
			var $this = $(this),
					thisId = $this.attr("id");

			prepareArrow( thisId );
			$this.css({"display" : "block"});
		})

    function animateArrow( thisSvgId ){
      var s = Snap('#'+thisSvgId);
      var path = s.select('path');
  		var len = path.getTotalLength();

	    path.animate(
	        {"stroke-dashoffset": 0},
	        600,
	        mina.easeout
	    );
    }

		var tl = new TimelineMax();

    tl.add(function() { TweenMax.staggerFromTo($(".iconsRow .b1 .iw .text span"), 0.2, { autoAlpha: 0, rotationX: -10, x: 20 }, { autoAlpha: 1, rotationX: 0, x: 0 }, 0.025) })
        .to($(".iconsRow .b1 .iconB"), 0.75, { ease: Back.easeOut.config(1.4), scale: 1 }, "b1")

        //.staggerFromTo( , 0.1, {autoAlpha:0, x: -30, force3D:true}, {autoAlpha:1,x: 0,force3D:true}, 0.018, "b1")
        .add(function() { animateArrow("arrow1") }, "-=0.35")
        .add(function() { TweenMax.staggerFromTo($(".iconsRow .b2 .iw .text span"), 0.2, { autoAlpha: 0, rotationX: -10, x: 20 }, { autoAlpha: 1, rotationX: 0, x: 0 }, 0.025) })
        .to($(".iconsRow .b2 .iconB"), 0.75, { ease: Back.easeOut.config(1.4), scale: 1, delay: 0.2 }, "b2")
        .add(function() { animateArrow("arrow2") }, "-=0.35")
        .add(function() { TweenMax.staggerFromTo($(".iconsRow .b3 .iw .text span"), 0.2, { autoAlpha: 0, rotationX: -10, x: 20 }, { autoAlpha: 1, rotationX: 0, x: 0 }, 0.025) })
        .to($(".iconsRow .b3 .iconB"), 0.75, { ease: Back.easeOut.config(1.4), scale: 1, delay: 0.2 }, "b3")
        .add(function() { animateArrow("arrow3") }, "-=0.35")
        .add(function() { TweenMax.staggerFromTo($(".iconsRow .b4 .iw .text span"), 0.2, { autoAlpha: 0, rotationX: -10, x: 20 }, { autoAlpha: 1, rotationX: 0, x: 0 }, 0.025) })
        .to($(".iconsRow .b4 .iconB"), 0.75, { ease: Back.easeOut.config(1.4), scale: 1, delay: 0.2 }, "b4")
        .add(function() { animateArrow("arrow4") }, "-=0.35")
        .add(function() { TweenMax.staggerFromTo($(".iconsRow .b5 .iw .text span"), 0.2, { autoAlpha: 0, rotationX: -10, x: 20 }, { autoAlpha: 1, rotationX: 0, x: 0 }, 0.025) })
        .to($(".iconsRow .b5 .iconB"), 0.75, { ease: Back.easeOut.config(1.4), scale: 1, delay: 0.2 }, "b5")
        .add(function() { contactsMap(); });

    $("#b1 .button").on("click", function() {
        disableScroll();
        TweenLite.to(window, 0.8, {
            ease: Sine.easeInOut,
            scrollTo: $("#contacts").offset().top + 100,
            onComplete: function() {
                enableScroll();
            }
        });
    });

	}

	function animateB5(){
		var $items = $("#b5 .shopsBlock .item"),
				itemsL = $items.length,
				itemW = $items.outerWidth(),
				$visibleItems,
				visibleItemsL,
				popupW = 315;

    function calc_outOfBound() {
        $items.each(function() {
            var $this = $(this),
                thisOL = $this.offset().left,
                thisPL = $this.position().left,
                WW = window.innerWidth;

            if (thisOL + itemW > WW || thisOL < 0) {
                $this.addClass("outOfBound");
            } else {
                if (thisOL + itemW + popupW > WW || thisPL + itemW + popupW > 1920) {
                    $this.addClass("right");
                } else {
                    $this.removeClass("right");
                }
                $this.removeClass("outOfBound");
            }
            $visibleItems = $items.filter(":not(.outOfBound)");
            visibleItemsL = $visibleItems.length;
        });
    }
    calc_outOfBound();

    $(window).on("debouncedresize", function(event) {
        calc_outOfBound();
    });


    var timerId = setInterval(function() {

        var $oldActive = $items.filter(".active");
        var $newActive = $visibleItems.filter(":not(.active)").eq(Math.round(getRandom(0, visibleItemsL - 1)));

        $oldActive.removeClass("active");
        setTimeout(function() {
            TweenMax.set($oldActive, { zIndex: 0 });
        }, 250);

        setTimeout(function() {
            $newActive.addClass("active");
            TweenMax.set($newActive, { zIndex: 1 });
        }, 500);


    }, 4000);
	}

  function animateB6() {
      var tween = TweenMax.staggerFromTo(".bubles .item", 2, { y: 300, autoAlpha: 0 }, { y: 0, autoAlpha: 1, ease: Elastic.easeOut.config(1, 0.5) }, 0.15);

      // build scene
      var scene = new ScrollMagic.Scene({ triggerElement: "#b6 .triggerHelper" })
          .setTween(tween)
          //.addIndicators({name: "staggering"}) // add indicators (requires plugin)
          .addTo(controller);
  }

  function getRecallForm() {

      $(".getRecall_Js").on("click", function(e) {
          e.preventDefault();

          var $form = $(".getRecallForm");
          $.magnificPopup.open({
              items: {
                  src: "<div class='defaultPopupContent mfp-with-anim'>" + $form[0].outerHTML + "<div class='response'></div></div>",
                  type: 'inline'
              },
              removalDelay: 500, //delay removal by X to allow out-animation
              closeBtnInside: true,
              mainClass: 'mfp-with-zoom',
              callbacks: {
                  beforeOpen: function() {
                      this.st.mainClass = "mfp-zoom-in defaultPopup";
                  },
                  open: function() {

                      var $form = $(".mfp-content .getRecallForm");

                      $form.find("input[name='name']").one("focus", function(){
                          $(this).click();
                      }).inputmask("A{2,40}",{ 
                          definitions: {
                              "A": {
                                validator: "[а-яА-ЯA-Za-z0-9 ]",
                                cardinality: 1
                              }
                          },
                          "onincomplete": function(){ 
                              $(this).removeClass("complete"); 
                              $(this).addClass("uncomplete");
                          },
                          "oncomplete": function(){ 
                              $(this).addClass("complete");
                              $(this).removeClass("uncomplete");
                          }
                      });
                      $form.find("input[name='email']").one("focus", function(){
                          $(this).click();
                      }).inputmask("email", {
                          "onincomplete": function() {
                              $(this).removeClass("complete");
                              $(this).addClass("uncomplete");
                          },
                          "oncomplete": function() {
                              $(this).addClass("complete");
                              $(this).removeClass("uncomplete");
                          }
                      });
                      $form.find("input[name='phone']").one("focus", function(){
                          $(this).click();
                      }).inputmask("+7(999)999-99-99", {
                          "onincomplete": function() {
                              $(this).removeClass("complete");
                              $(this).addClass("uncomplete");
                          },
                          "oncomplete": function() {
                              $(this).addClass("complete");
                              $(this).removeClass("uncomplete");
                          }
                      });

                      var submit = $form.find("input[type='submit']");
                      $form.on('submit', function(event) {
                          if( submit.hasClass("loading") ){ return false; }
                          if ( $form.find("input.ajax:not(.complete)").length > 0 ) {
                              $(".mfp-content .response").removeClass("error good").html("Заполните необходимые поля").addClass("error");

                              $form.find("input.ajax").each(function() {
                                  var $this = $(this);
                                  if (!$this.inputmask("isComplete")) {
                                      $this.addClass("uncomplete");
                                  }
                              });

                              return false;
                          }

                          event.preventDefault();
                          submit.addClass('loading');

                          var data = {};
                          $form.find("input.ajax").each(function(index, one) {
                              var value = decodeURIComponent(this.value);
                              data[this.name] = isJSON(value) ? JSON.parse(value) : value;
                          });


                          $.ajax({
                              type: 'POST',
                              url: $form.attr("action"),
                              data: data,
                              dataType: 'json',
                              success: function(response) {
                                  submit.removeClass('loading');
                                  if (response.status != 'ok') {
                                      $(".mfp-content .response").removeClass("error good").html("Ошибка сервера, попробуйте отправить еще раз или позвоните по телефону +7 (495) 120-32-30").addClass("error");
                                  } else {
                                      $(".mfp-content .response").removeClass("error good").html("Заявка принята, спасибо. В ближайшее время мы свяжемся с вами<br/><br/>Если у вас есть вопросы - звоните, будем рады:<br/>+7 (495) 120-32-30").addClass("good");
                                      submit.prop('disabled', true);
                                  }


                              },
                              error: function() {
                                  $(".mfp-content .response").removeClass("error good").html("При отправке произошла ошибка").addClass("error");
                              }
                          });

                      });

                  },
                  beforeClose: function() {

                  },
              },
              midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
          });

      });
  }

  function getOfferForm() {
      var $form = $("#getOfferFrom");

      $form.find("input[name='name']").one("focus", function(){
          $(this).click();
      }).inputmask("A{2,40}",{ 
          definitions: {
              "A": {
                validator: "[а-яА-ЯA-Za-z0-9 ]",
                cardinality: 1
              }
          },
          "onincomplete": function(){ 
              $(this).removeClass("complete"); 
              $(this).addClass("uncomplete");
          },
          "oncomplete": function(){ 
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });
      $form.find("input[name='email']").one("focus", function(){
          $(this).click();
      }).inputmask("email", {
          "onincomplete": function() {
              $(this).removeClass("complete");
              $(this).addClass("uncomplete");
          },
          "oncomplete": function() {
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });

      var submit = $form.find("input[type='submit']");
      $form.on('submit', function(event) {
          if( submit.hasClass("loading") ){ return false; }
          if ( $form.find("input.ajax:not(.complete)").length > 0 ) {
              $.magnificPopup.open({
                  items: {
                      src: "<div class='defaultPopupContent mfp-with-anim'>Заполните необходимые поля</div>",
                      type: 'inline'
                  },
                  removalDelay: 500, //delay removal by X to allow out-animation
                  closeBtnInside: true,
                  mainClass: 'mfp-with-zoom',
                  callbacks: {
                      beforeOpen: function() {
                          this.st.mainClass = "mfp-zoom-in defaultPopup";
                      },
                      beforeClose: function() {

                      },
                  },
                  midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
              });
              $form.find("input.ajax").each(function() {
                  var $this = $(this);
                  if (!$this.inputmask("isComplete")) {
                      $this.addClass("uncomplete");
                  }
              });

              return false;
          }

          event.preventDefault();
          submit.addClass('loading');

          var data = {};
          $form.find("input.ajax").each(function(index, one) {
              var value = decodeURIComponent(this.value);
              data[this.name] = isJSON(value) ? JSON.parse(value) : value;
          });


          $.ajax({
              type: 'POST',
              url: $form.attr("action"),
              data: data,
              dataType: 'json',
              success: function(response) {
                  submit.removeClass('loading');
                  if (response.status != 'ok') {
                      $.magnificPopup.open({
                          items: {
                              src: "<div class='defaultPopupContent mfp-with-anim'>Ошибка сервера, попробуйте отправить еще раз или позвоните по телефону +7 (495) 120-32-30</div>",
                              type: 'inline'
                          },
                          removalDelay: 500, //delay removal by X to allow out-animation
                          closeBtnInside: true,
                          mainClass: 'mfp-with-zoom',
                          callbacks: {
                              beforeOpen: function() {
                                  this.st.mainClass = "mfp-zoom-in defaultPopup";
                              },
                              beforeClose: function() {

                              },
                          },
                          midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                      });
                  } else {
                      $.magnificPopup.open({
                          items: {
                              src: "<div class='defaultPopupContent mfp-with-anim'>Заявка принята, спасибо. В ближайшее время мы свяжемся с вами<br/><br/>Если у вас есть вопросы - звоните, будем рады:<br/>+7 (495) 120-32-30</div>",
                              type: 'inline'
                          },
                          removalDelay: 500, //delay removal by X to allow out-animation
                          closeBtnInside: true,
                          mainClass: 'mfp-with-zoom',
                          callbacks: {
                              beforeOpen: function() {
                                  this.st.mainClass = "mfp-zoom-in defaultPopup";
                              },
                              beforeClose: function() {

                              },
                          },
                          midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                      });
                      submit.prop('disabled', true);
                  }


              },
              error: function() {
                  $.magnificPopup.open({
                      items: {
                          src: "<div class='defaultPopupContent mfp-with-anim'>При отправке произошла ошибка</div>",
                          type: 'inline'
                      },
                      removalDelay: 500, //delay removal by X to allow out-animation
                      closeBtnInside: true,
                      mainClass: 'mfp-with-zoom',
                      callbacks: {
                          beforeOpen: function() {
                              this.st.mainClass = "mfp-zoom-in defaultPopup";
                          },
                          beforeClose: function() {

                          },
                      },
                      midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                  });
              }
          });

      });

  }

  function contactsForm() {
      var $form = $("#requestForm");

      $form.find("input[name='name']").one("focus", function(){
          $(this).click();
      }).inputmask("A{2,40}",{ 
          definitions: {
              "A": {
                validator: "[а-яА-ЯA-Za-z0-9 ]",
                cardinality: 1
              }
          },
          "onincomplete": function(){ 
              $(this).removeClass("complete"); 
              $(this).addClass("uncomplete");
          },
          "oncomplete": function(){ 
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });
      $form.find("input[name='email']").one("focus", function(){
          $(this).click();
      }).inputmask("email", {
          "onincomplete": function() {
              $(this).removeClass("complete");
              $(this).addClass("uncomplete");
          },
          "oncomplete": function() {
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });
      $form.find("input[name='phone']").one("focus", function(){
          $(this).click();
      }).inputmask("+7(999)999-99-99", {
          "onincomplete": function() {
              $(this).removeClass("complete");
              $(this).addClass("uncomplete");
          },
          "oncomplete": function() {
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });
      $form.find("input[name='url']").one("focus", function(){
          $(this).click();
      }).inputmask({
          mask: "http://*{1,100}",
          definitions: {
              '*': {
                  validator: "[0-9A-Za-z!#$%&.,'*+/=?^_`{|}~\-]",
                  cardinality: 1,
                  casing: "lower"
              }
          },
          "onincomplete": function() {
              $(this).removeClass("complete");
              $(this).addClass("uncomplete");
          },
          "oncomplete": function() {
              $(this).addClass("complete");
              $(this).removeClass("uncomplete");
          }
      });
      $form.find("input[name='rules']").on("change", function() {
          var $this = $(this);
          if ($this.prop('checked')) {
              $this.addClass("complete");
              $this.removeClass("uncomplete");
          } else {
              $this.addClass("uncomplete");
              $this.removeClass("complete");
          }
      });


      var submit = $form.find("input[type='submit']");
      $form.on('submit', function(event) {
          if( submit.hasClass("loading") ){ return false; }
          if (
              $form.find("input[name='rules']:not(.complete)").length > 0 ||
              $form.find("input.ajax:not(.complete)").length > 0
          ) {
              $.magnificPopup.open({
                  items: {
                      src: "<div class='defaultPopupContent mfp-with-anim'>Заполните необходимые поля</div>",
                      type: 'inline'
                  },
                  removalDelay: 500, //delay removal by X to allow out-animation
                  closeBtnInside: true,
                  mainClass: 'mfp-with-zoom',
                  callbacks: {
                      beforeOpen: function() {
                          this.st.mainClass = "mfp-zoom-in defaultPopup";
                      },
                      beforeClose: function() {

                      },
                  },
                  midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
              });
              $form.find("input.ajax").each(function() {
                  var $this = $(this);
                  if (!$this.inputmask("isComplete")) {
                      $this.addClass("uncomplete");
                  }
              });
              if (!$form.find("input[name='rules']").prop('checked')) {
                  $form.find("input[name='rules']").addClass("uncomplete");
              }

              return false;
          }

          event.preventDefault();
          submit.addClass('loading');

          var data = {};
          $form.find("input.ajax").each(function(index, one) {
              var value = decodeURIComponent(this.value);
              data[this.name] = isJSON(value) ? JSON.parse(value) : value;
          });


          $.ajax({
              type: 'POST',
              url: $form.attr("action"),
              data: data,
              dataType: 'json',
              success: function(response) {
                  submit.removeClass('loading');
                  if (response.status != 'ok') {
                      $.magnificPopup.open({
                          items: {
                              src: "<div class='defaultPopupContent mfp-with-anim'>Ошибка сервера, попробуйте отправить еще раз или позвоните по телефону +7 (495) 120-32-30</div>",
                              type: 'inline'
                          },
                          removalDelay: 500, //delay removal by X to allow out-animation
                          closeBtnInside: true,
                          mainClass: 'mfp-with-zoom',
                          callbacks: {
                              beforeOpen: function() {
                                  this.st.mainClass = "mfp-zoom-in defaultPopup";
                              },
                              beforeClose: function() {

                              },
                          },
                          midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                      });
                  } else {
                      $.magnificPopup.open({
                          items: {
                              src: "<div class='defaultPopupContent mfp-with-anim'>Заявка принята, спасибо. В ближайшее время мы свяжемся с вами<br/><br/>Если у вас есть вопросы - звоните, будем рады:<br/>+7 (495) 120-32-30</div>",
                              type: 'inline'
                          },
                          removalDelay: 500, //delay removal by X to allow out-animation
                          closeBtnInside: true,
                          mainClass: 'mfp-with-zoom',
                          callbacks: {
                              beforeOpen: function() {
                                  this.st.mainClass = "mfp-zoom-in defaultPopup";
                              },
                              beforeClose: function() {

                              },
                          },
                          midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                      });
                      submit.prop('disabled', true);
                  }


              },
              error: function() {
                  $.magnificPopup.open({
                      items: {
                          src: "<div class='defaultPopupContent mfp-with-anim'>При отправке произошла ошибка</div>",
                          type: 'inline'
                      },
                      removalDelay: 500, //delay removal by X to allow out-animation
                      closeBtnInside: true,
                      mainClass: 'mfp-with-zoom',
                      callbacks: {
                          beforeOpen: function() {
                              this.st.mainClass = "mfp-zoom-in defaultPopup";
                          },
                          beforeClose: function() {

                          },
                      },
                      midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
                  });
              }
          });

      });
  }

	function paralaxBgs(){
		var lay;
		if( $('.check1920lay').is(':visible') ){
			lay = "lt1920";
		}else{
			lay = "gt1920";
		}

		function isChangePageLayout() {
			if( $('.check1920lay').is(':visible') && lay == "gt1920" ) {
				lay = "lt1920";
				return true;
			} else if( !$('.check1920lay').is(':visible') && lay == "lt1920" ){
				lay = "gt1920";
				return true;
			} else {
				return false;
			}
		}

		var scene1,scene2,scene3;

		var dur1,
				dur2,
				dur3;

		function calcDur(){
			var WH = $(window).height();

			dur1 = $("#b1").outerHeight()+50;
			dur2 = $("#b3").outerHeight() > WH ? $("#b3").outerHeight() : WH;
			dur3 = $("#b6").outerHeight() > WH ? $("#b6").outerHeight() : WH;
		}

		calcDur();

		function createParalax(){
			if( lay == "gt1920" ){
				var p1Y = 25-50;
				var p2Y = 27-50;
				var p3Y = 21-50;

				var p1YE = -50-26;
				var p2YE = -50-26;
				var p3YE = -50-17;
			}else{
			 	var p1Y = 17-50;
			 	var p2Y = 22-50;
			 	var p3Y = 19-50;

				var p1YE = -50-20;
				var p2YE = -50-24;
				var p3YE = -50-12;
			}


			TweenMax.set( $("#parallax1"), {y: p1Y+"%" });
			TweenMax.set( $("#parallax2"), {y: p2Y+"%" });
			TweenMax.set( $("#parallax3"), {y: p3Y+"%" });

			scene1 = new ScrollMagic.Scene({triggerElement: "body" , duration: dur1, triggerHook: "onLeave" })
							.setTween("#parallax1", {y: p1YE+"%", ease: Linear.easeNone})
							//.addIndicators()
							.addTo(controller);

			scene2 = new ScrollMagic.Scene({triggerElement: "#b3" , duration: dur2*2, triggerHook: "onEnter" })
							.setTween("#parallax2", {y: p2YE+"%", ease: Linear.easeNone})
							//.addIndicators()
							.addTo(controller);

			scene3 = new ScrollMagic.Scene({triggerElement: "#b6" , duration: dur3*2, triggerHook: "onEnter" })
							.setTween("#parallax3", {y: p3YE+"%", ease: Linear.easeNone})
							//.addIndicators()
							.addTo(controller);
		}
		createParalax();


		$(window).on("debouncedresize", function( event ) {
			if( isChangePageLayout() ){
				scene1.remove();
				scene2.remove();
				scene3.remove();
				calcDur();
				createParalax();
			}else{
				calcDur();
				scene1.duration(dur1);
				scene2.duration(dur2*2);
				scene3.duration(dur3*2);	
			}
		});
	}

	$(document).ready(function(){
	//$(window).on("load", function(){
		svg4everybody({});
		$(window).scrollTop(0);
		paralaxBgs();
  	setTimeout(function(){
			animateB1();
  	}, 1000);
		animateB5();
		animateB6();
		contactsForm();
		getRecallForm();
		getOfferForm();
	});

})();
window.onbeforeunload = function () {
  scroll(0,0);
}